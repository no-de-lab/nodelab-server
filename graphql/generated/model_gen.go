// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package gqlschema

import (
	"fmt"
	"io"
	"strconv"
)

type Comment interface {
	IsComment()
}

type Connection interface {
	IsConnection()
}

type Edge interface {
	IsEdge()
}

type Node interface {
	IsNode()
}

type Auth struct {
	Email string `json:"email"`
	Token string `json:"token"`
}

type Category struct {
	ID       string      `json:"id"`
	Name     string      `json:"name"`
	Children []*Category `json:"children"`
}

type CommentConnection struct {
	Edges      []*CommentEdge `json:"edges"`
	TotalCount int            `json:"totalCount"`
	PageInfo   *PageInfo      `json:"pageInfo"`
}

type CommentEdge struct {
	Cursor string  `json:"cursor"`
	Node   Comment `json:"node"`
}

type Curriculum struct {
	ID string `json:"id"`
	// 커리큘럼 아이템
	Items     []*CurriculumItem `json:"items"`
	CreatedAt string            `json:"createdAt"`
	UpdatedAt string            `json:"updatedAt"`
}

type CurriculumItem struct {
	ID        string `json:"id"`
	Title     string `json:"title"`
	Content   string `json:"content"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
}

type PageInfo struct {
	EndCursor       string `json:"endCursor"`
	HasNextPage     bool   `json:"hasNextPage"`
	HasPreviousPage bool   `json:"hasPreviousPage"`
	StartCursor     string `json:"startCursor"`
}

type Study struct {
	// study id
	ID string `json:"id"`
	// 카테고리 (leaf node)
	Category *Category `json:"category"`
	// 태그 목록
	Tags []string `json:"tags"`
	// 정원 (명수)
	Limit int `json:"limit"`
	// 썸네일 (URL)
	Thumbnail string `json:"thumbnail"`
	// 제목
	Title string `json:"title"`
	// 내용 (HTML)
	Content string `json:"content"`
	// 스터디 설명
	Summary string `json:"summary"`
	// 스터디 상태 (개설, 모집중, 종료)
	Status StudyStatus `json:"status"`
	// 스터디 기간 (일 단위)
	Duration int `json:"duration"`
	// 작성자
	Author *User `json:"author"`
	// 시작일
	StartedAt string `json:"startedAt"`
	// study 구성원 내역
	Users []*User `json:"users"`
	// study 신청 내역
	// author 만 열람 가능
	Requests []*StudyRequest `json:"requests"`
	// study curriculum
	Curriculums []*Curriculum `json:"curriculums"`
	// TODO: param 적용
	Comments *CommentConnection `json:"comments"`
	// 좋아요 개수
	LikeCount int `json:"likeCount"`
	// 로그인 한 사람이 북마크 했는지 표시
	ViewerHasBookmarked bool   `json:"viewerHasBookmarked"`
	CreatedAt           string `json:"createdAt"`
	UpdatedAt           string `json:"updatedAt"`
}

func (Study) IsNode() {}

type StudyComment struct {
	ID        string `json:"id"`
	Content   string `json:"content"`
	Author    *User  `json:"author"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
}

func (StudyComment) IsComment() {}

type StudyConnection struct {
	Edges      []*StudyEdge `json:"edges"`
	TotalCount int          `json:"totalCount"`
	PageInfo   *PageInfo    `json:"pageInfo"`
}

func (StudyConnection) IsConnection() {}

type StudyEdge struct {
	Cursor string `json:"cursor"`
	Node   *Study `json:"node"`
}

func (StudyEdge) IsEdge() {}

type StudyRequest struct {
	ID string `json:"id"`
	// 신청한 유저
	User *User `json:"user"`
	// 신청 승인에 대한 상태
	Status StudyRequestStatus `json:"status"`
	// 신청할떄 보내는 내용
	Content   string `json:"content"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
}

type UpdateUserInput struct {
	Username  *string `json:"username"`
	Position  *string `json:"position"`
	Interest  *string `json:"interest"`
	GithubURL *string `json:"githubURL"`
	Intro     *string `json:"intro"`
}

type User struct {
	ID        string  `json:"id"`
	Email     string  `json:"email"`
	Username  string  `json:"username"`
	Intro     *string `json:"intro"`
	GithubURL *string `json:"githubUrl"`
	// 포지션
	Position *string `json:"position"`
	// 관심사
	Interest     *string `json:"interest"`
	ProfileImage *string `json:"profileImage"`
	// 유저 스터디 목록
	Studies *StudyConnection `json:"studies"`
	// 로그인한 유저인지 판별
	IsViewer  bool   `json:"isViewer"`
	CreatedAt string `json:"createdAt"`
	UpdatedAt string `json:"updatedAt"`
}

func (User) IsNode() {}

type Provider string

const (
	ProviderKakao  Provider = "KAKAO"
	ProviderGoogle Provider = "GOOGLE"
	ProviderGithub Provider = "GITHUB"
)

var AllProvider = []Provider{
	ProviderKakao,
	ProviderGoogle,
	ProviderGithub,
}

func (e Provider) IsValid() bool {
	switch e {
	case ProviderKakao, ProviderGoogle, ProviderGithub:
		return true
	}
	return false
}

func (e Provider) String() string {
	return string(e)
}

func (e *Provider) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Provider(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Provider", str)
	}
	return nil
}

func (e Provider) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StudyRequestStatus string

const (
	StudyRequestStatusHold     StudyRequestStatus = "HOLD"
	StudyRequestStatusApproved StudyRequestStatus = "APPROVED"
	StudyRequestStatusRejected StudyRequestStatus = "REJECTED"
)

var AllStudyRequestStatus = []StudyRequestStatus{
	StudyRequestStatusHold,
	StudyRequestStatusApproved,
	StudyRequestStatusRejected,
}

func (e StudyRequestStatus) IsValid() bool {
	switch e {
	case StudyRequestStatusHold, StudyRequestStatusApproved, StudyRequestStatusRejected:
		return true
	}
	return false
}

func (e StudyRequestStatus) String() string {
	return string(e)
}

func (e *StudyRequestStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StudyRequestStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StudyRequestStatus", str)
	}
	return nil
}

func (e StudyRequestStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type StudyStatus string

const (
	// 개설 (모집중)
	StudyStatusOpen StudyStatus = "OPEN"
	// 진행중
	StudyStatusProgress StudyStatus = "PROGRESS"
	// 종료
	StudyStatusClosed StudyStatus = "CLOSED"
)

var AllStudyStatus = []StudyStatus{
	StudyStatusOpen,
	StudyStatusProgress,
	StudyStatusClosed,
}

func (e StudyStatus) IsValid() bool {
	switch e {
	case StudyStatusOpen, StudyStatusProgress, StudyStatusClosed:
		return true
	}
	return false
}

func (e StudyStatus) String() string {
	return string(e)
}

func (e *StudyStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = StudyStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid StudyStatus", str)
	}
	return nil
}

func (e StudyStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
