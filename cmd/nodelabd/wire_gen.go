// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"github.com/google/wire"
	"github.com/no-de-lab/nodelab-server/api/healthcheck"
	"github.com/no-de-lab/nodelab-server/config"
	"github.com/no-de-lab/nodelab-server/container"
	"github.com/no-de-lab/nodelab-server/db"
	"github.com/no-de-lab/nodelab-server/graphql/resolver"
	"github.com/no-de-lab/nodelab-server/internal/auth"
	graphql2 "github.com/no-de-lab/nodelab-server/internal/auth/delivery/graphql"
	http2 "github.com/no-de-lab/nodelab-server/internal/auth/delivery/http"
	"github.com/no-de-lab/nodelab-server/internal/auth/model"
	repository2 "github.com/no-de-lab/nodelab-server/internal/auth/repository"
	service2 "github.com/no-de-lab/nodelab-server/internal/auth/service"
	"github.com/no-de-lab/nodelab-server/internal/auth/util"
	"github.com/no-de-lab/nodelab-server/internal/study"
	graphql3 "github.com/no-de-lab/nodelab-server/internal/study/delivery/graphql"
	http3 "github.com/no-de-lab/nodelab-server/internal/study/delivery/http"
	repository3 "github.com/no-de-lab/nodelab-server/internal/study/repository"
	service3 "github.com/no-de-lab/nodelab-server/internal/study/service"
	"github.com/no-de-lab/nodelab-server/internal/user"
	"github.com/no-de-lab/nodelab-server/internal/user/delivery/graphql"
	"github.com/no-de-lab/nodelab-server/internal/user/delivery/http"
	"github.com/no-de-lab/nodelab-server/internal/user/repository"
	"github.com/no-de-lab/nodelab-server/internal/user/service"
)

// Injectors from wire.go:

// InitializeDIContainer return instance bean container
func InitializeDIContainer() *container.DIContainer {
	configuration := config.LoadConfig()
	sqlxDB := db.NewDatabase(configuration)
	userRepository := repository.NewUserRepository(sqlxDB)
	userService := service.NewUserService(userRepository, configuration)
	userHandler := http.NewUserHandler(userService)
	jwtMaker := util.NewJWTMaker(configuration)
	authRepository := repository2.NewAuthRepository(sqlxDB)
	authService := service2.NewAuthService(jwtMaker, userService, authRepository)
	authHandler := http2.NewAuthHandler(authService)
	studyRepository := repository3.NewStudyRepository(sqlxDB)
	studyService := service3.NewStudyService(studyRepository, configuration)
	studyHandler := http3.NewStudyHandler(studyService)
	healthCheckHandler := healthcheck.NewHealthCheckHandler()
	diContainer := container.NewDIContainer(configuration, userHandler, authHandler, studyHandler, healthCheckHandler)
	return diContainer
}

// InitializeResolver return root resolver
func InitializeResolver() *resolver.Resolver {
	validate := model.NewValidator()
	configuration := config.LoadConfig()
	sqlxDB := db.NewDatabase(configuration)
	userRepository := repository.NewUserRepository(sqlxDB)
	userService := service.NewUserService(userRepository, configuration)
	userResolver := graphql.NewUserResolver(validate, userService)
	jwtMaker := util.NewJWTMaker(configuration)
	authRepository := repository2.NewAuthRepository(sqlxDB)
	authService := service2.NewAuthService(jwtMaker, userService, authRepository)
	authResolver := graphql2.NewAuthResolver(validate, authService)
	studyRepository := repository3.NewStudyRepository(sqlxDB)
	studyService := service3.NewStudyService(studyRepository, configuration)
	studyResolver := graphql3.NewStudyResolver(validate, studyService)
	resolverResolver := resolver.NewResolver(userResolver, authResolver, studyResolver)
	return resolverResolver
}

// wire.go:

// MainSet all instance set (service, resolver, handler ... etc)
var MainSet = wire.NewSet(healthcheck.NewHealthCheckHandler, config.LoadConfig, db.NewDatabase, auth.AuthSet, user.UserSet, study.StudySet, container.NewDIContainer, resolver.NewResolver)
